{"version":3,"sources":["images/starwars_planets.png","context/StarWarsContext.js","components/PlanetsTable.js","components/Header.jsx","services/starwarsAPI.js","context/StarWarsProvider.js","components/PlanetsFilters.js","App.js","index.js"],"names":["module","exports","StarWarsContext","createContext","PlanetsTable","useContext","data","filteredData","name","filters","filterByName","dataFilteredByName","filter","planet","includes","length","className","map","key","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","Header","src","banner","alt","React","Component","getPlanets","fetch","then","response","json","ok","Promise","resolve","reject","StarWarsProvider","children","useState","setDataPlanets","filterName","setFilterName","filterColumn","setColumn","filterComparison","setComparison","filterValue","setValue","setFilteredData","filtersArray","setFiltersArray","useEffect","a","results","dataPlanets","fetchPlanets","optionsFiltered","setOptionsColumn","forEach","column","comparison","value","parseFloat","filterPlanets","context","filterByNumericValues","handleFilterByName","input","target","handleInputColumn","handleInputComparison","handleInputValue","filterDataButton","option","deleteFilter","event","removedFilter","Provider","PlanetsFilters","type","data-testid","onChange","placeholder","onClick","index","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60d2e586.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starwars_planets.652647e7.png\";","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction PlanetsTable() {\n  const {\n    data,\n    filteredData,\n    filters: {\n      filterByName: { name },\n    } } = useContext(StarWarsContext);\n\n  const dataFilteredByName = filteredData\n    .filter((planet) => planet.name.includes(name));\n\n  const ZERO = 0;\n\n  return data.length > ZERO ? (\n    <div>\n      <table className=\"planets-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Rotation Period</th>\n            <th>Orbital Period</th>\n            <th>Diameter</th>\n            <th>Climate</th>\n            <th>Gravity</th>\n            <th>Terrain</th>\n            <th>Surface Water</th>\n            <th>Population</th>\n            <th>Films</th>\n            <th>Created</th>\n            <th>Edited</th>\n            <th>URL</th>\n          </tr>\n        </thead>\n        <tbody>\n          {name !== '' ? dataFilteredByName.map((planet) => (\n            <tr key={ planet.name }>\n              <td>{planet.name}</td>\n              <td>{planet.rotation_period}</td>\n              <td>{planet.orbital_period}</td>\n              <td>{planet.diameter}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.gravity}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.surface_water}</td>\n              <td>{planet.population}</td>\n              <td>{planet.films[0]}</td>\n              <td>{planet.created}</td>\n              <td>{planet.edited}</td>\n              <td>{planet.url}</td>\n            </tr>\n          )) : filteredData.map((planet) => (\n            <tr key={ planet.name }>\n              <td>{planet.name}</td>\n              <td>{planet.rotation_period}</td>\n              <td>{planet.orbital_period}</td>\n              <td>{planet.diameter}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.gravity}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.surface_water}</td>\n              <td>{planet.population}</td>\n              <td>{planet.films[0]}</td>\n              <td>{planet.created}</td>\n              <td>{planet.edited}</td>\n              <td>{planet.url}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n    : (<div>Loading...</div>);\n}\n\nexport default PlanetsTable;\n","import React from 'react';\nimport banner from '../images/starwars_planets.png';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <img src={ banner } alt=\"banner\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","const URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nexport const getPlanets = () => (\n  fetch(URL).then((response) => (\n    response\n      .json()\n      .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n  ))\n);\n\nexport default getPlanets;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport { getPlanets } from '../services/starwarsAPI';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setDataPlanets] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterColumn, setColumn] = useState('');\n  const [filterComparison, setComparison] = useState('');\n  const [filterValue, setValue] = useState('');\n  const [filteredData, setFilteredData] = useState(data);\n  const [filtersArray, setFiltersArray] = useState([]);\n\n  useEffect(() => {\n    async function fetchPlanets() {\n      const { results } = await getPlanets();\n      const dataPlanets = results;\n      setDataPlanets(dataPlanets);\n      setFilteredData(dataPlanets);\n    }\n    fetchPlanets();\n  }, []);\n\n  const handleFilterByName = (input) => {\n    const { value } = input.target;\n    setFilterName(value);\n  };\n\n  const handleInputColumn = (input) => {\n    const { value } = input.target;\n    setColumn(value);\n  };\n\n  const handleInputComparison = (input) => {\n    const { value } = input.target;\n    setComparison(value);\n  };\n\n  const handleInputValue = (input) => {\n    const { value } = input.target;\n    setValue(value);\n  };\n\n  const filterPlanets = (column, comparison, value) => {\n    switch (comparison) {\n    case 'greater than':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) > parseFloat(value))));\n      break;\n    case 'less than':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) < parseFloat(value))));\n      break;\n    case 'equal to':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) === parseFloat(value))));\n      break;\n    default:\n      setFilteredData(filteredData);\n    }\n  };\n\n  const options = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const [optionsFiltered, setOptionsColumn] = useState(options);\n  const filterDataButton = () => {\n    if (filterColumn !== '' && filterComparison !== '' && filterValue !== '') {\n      setFiltersArray([...filtersArray, {\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue,\n      }]);\n      setOptionsColumn(optionsFiltered.filter((option) => option !== filterColumn));\n    } else setFilteredData(filteredData);\n  };\n\n  useEffect(() => {\n    filtersArray\n      .forEach((filter) => filterPlanets(filter.column, filter.comparison, filter.value));\n  }, [filtersArray]);\n\n  const deleteFilter = (event) => {\n    const { value } = event.target;\n    const removedFilter = filtersArray.filter((filter) => (filter.column !== value));\n    setFiltersArray(removedFilter);\n    setFilteredData(data);\n    setOptionsColumn([...optionsFiltered, value]);\n  };\n\n  const context = {\n    data,\n    filteredData,\n    filters: {\n      filterByName: {\n        name: filterName,\n      },\n      filterByNumericValues: filtersArray,\n    },\n    handleFilterByName,\n    handleInputColumn,\n    handleInputComparison,\n    handleInputValue,\n    setFilteredData,\n    filterDataButton,\n    deleteFilter,\n    optionsFiltered,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nexport default StarWarsProvider;\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction PlanetsFilters() {\n  const {\n    handleFilterByName,\n    handleInputColumn,\n    handleInputComparison,\n    handleInputValue,\n    filterDataButton,\n    deleteFilter,\n    optionsFiltered,\n    filters: { filterByNumericValues },\n  } = useContext(StarWarsContext);\n\n  const ONE = 1;\n\n  return (\n    <div className=\"filters-container \">\n      <div className=\"filter-selector\">\n        <input\n          type=\"text\"\n          data-testid=\"name-filter\"\n          onChange={ handleFilterByName }\n          placeholder=\"Filter by Name\"\n        />\n        <select\n          data-testid=\"column-filter\"\n          onChange={ handleInputColumn }\n        >\n          <option value=\"\">Choose column</option>\n          { optionsFiltered.map((option) => (\n            <option key={ option } value={ option }>{ option }</option>)) }\n        </select>\n        <select\n          data-testid=\"comparison-filter\"\n          onChange={ handleInputComparison }\n        >\n          <option value=\"\">Choose comparison</option>\n          <option value=\"greater than\">greater than</option>\n          <option value=\"less than\">less than</option>\n          <option value=\"equal to\">equal to</option>\n        </select>\n        <input\n          type=\"number\"\n          placeholder=\"value\"\n          data-testid=\"value-filter\"\n          onChange={ handleInputValue }\n        />\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ filterDataButton }\n        >\n          Filter\n        </button>\n      </div>\n      { filterByNumericValues.length >= ONE\n        ? filterByNumericValues.map((filter, index) => (\n          <div data-testid=\"filter\" key={ index } className=\"filters\">\n            <p>\n              {`Filter ${index + 1}:\n              ${filter.column} ${filter.comparison} ${filter.value}` }\n            </p>\n            <button\n              type=\"button\"\n              value={ filter.column }\n              onClick={ deleteFilter }\n            >\n              X\n            </button>\n          </div>\n        )) : <div>Sem filtros</div>}\n    </div>\n  );\n}\n\nexport default PlanetsFilters;\n","import React from 'react';\nimport './App.css';\nimport PlanetsTable from './components/PlanetsTable';\nimport Header from './components/Header';\nimport StarWarsProvider from './context/StarWarsProvider';\nimport PlanetsFilters from './components/PlanetsFilters';\n\nfunction App() {\n  return (\n    <div className=\"starwars-page\">\n      <StarWarsProvider>\n        <Header />\n        <PlanetsFilters />\n        <PlanetsTable />\n      </StarWarsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}