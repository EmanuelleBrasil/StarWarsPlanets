{"ast":null,"code":"import _toConsumableArray from\"/home/emanuelle/Trybe/frontend/projects/StarWarsPlanets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/emanuelle/Trybe/frontend/projects/StarWarsPlanets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/emanuelle/Trybe/frontend/projects/StarWarsPlanets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/emanuelle/Trybe/frontend/projects/StarWarsPlanets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import StarWarsContext from'./StarWarsContext';import{getPlanets}from'../services/starwarsAPI';var StarWarsProvider=function StarWarsProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setDataPlanets=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),filterName=_useState4[0],setFilterName=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),filterColumn=_useState6[0],setColumn=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),filterComparison=_useState8[0],setComparison=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),filterValue=_useState10[0],setValue=_useState10[1];var _useState11=useState(data),_useState12=_slicedToArray(_useState11,2),filteredData=_useState12[0],setFilteredData=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),filtersArray=_useState14[0],setFiltersArray=_useState14[1];useEffect(function(){function fetchPlanets(){return _fetchPlanets.apply(this,arguments);}function _fetchPlanets(){_fetchPlanets=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getPlanets,results,dataPlanets;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getPlanets();case 2:_yield$getPlanets=_context.sent;results=_yield$getPlanets.results;dataPlanets=results;setDataPlanets(dataPlanets);setFilteredData(dataPlanets);case 7:case\"end\":return _context.stop();}}},_callee);}));return _fetchPlanets.apply(this,arguments);}fetchPlanets();},[]);var handleFilterByName=function handleFilterByName(input){var value=input.target.value;setFilterName(value);};var handleInputColumn=function handleInputColumn(input){var value=input.target.value;setColumn(value);};var handleInputComparison=function handleInputComparison(input){var value=input.target.value;setComparison(value);};var handleInputValue=function handleInputValue(input){var value=input.target.value;setValue(value);};var filterPlanets=function filterPlanets(column,comparison,value){switch(comparison){case'greater than':setFilteredData(filteredData.filter(function(planet){return parseFloat(planet[column])>parseFloat(value);}));break;case'less than':setFilteredData(filteredData.filter(function(planet){return parseFloat(planet[column])<parseFloat(value);}));break;case'equal to':setFilteredData(filteredData.filter(function(planet){return parseFloat(planet[column])===parseFloat(value);}));break;default:setFilteredData(filteredData);}};var options=['population','orbital_period','diameter','rotation_period','surface_water'];var _useState15=useState(options),_useState16=_slicedToArray(_useState15,2),optionsFiltered=_useState16[0],setOptionsColumn=_useState16[1];var filterDataButton=function filterDataButton(){if(filterColumn!==''&&filterComparison!==''&&filterValue!==''){setFiltersArray([].concat(_toConsumableArray(filtersArray),[{column:filterColumn,comparison:filterComparison,value:filterValue}]));setOptionsColumn(optionsFiltered.filter(function(option){return option!==filterColumn;}));}else setFilteredData(filteredData);};useEffect(function(){filtersArray.forEach(function(filter){return filterPlanets(filter.column,filter.comparison,filter.value);});},[filtersArray]);var deleteFilter=function deleteFilter(event){var value=event.target.value;var removedFilter=filtersArray.filter(function(filter){return filter.column!==value;});setFiltersArray(removedFilter);setFilteredData(data);setOptionsColumn([].concat(_toConsumableArray(optionsFiltered),[value]));};var context={data:data,filteredData:filteredData,filters:{filterByName:{name:filterName},filterByNumericValues:filtersArray},handleFilterByName:handleFilterByName,handleInputColumn:handleInputColumn,handleInputComparison:handleInputComparison,handleInputValue:handleInputValue,setFilteredData:setFilteredData,filterDataButton:filterDataButton,deleteFilter:deleteFilter,optionsFiltered:optionsFiltered};return/*#__PURE__*/React.createElement(StarWarsContext.Provider,{value:context},children);};export default StarWarsProvider;","map":{"version":3,"sources":["/home/emanuelle/Trybe/frontend/projects/StarWarsPlanets/src/context/StarWarsProvider.js"],"names":["React","useEffect","useState","StarWarsContext","getPlanets","StarWarsProvider","children","data","setDataPlanets","filterName","setFilterName","filterColumn","setColumn","filterComparison","setComparison","filterValue","setValue","filteredData","setFilteredData","filtersArray","setFiltersArray","fetchPlanets","results","dataPlanets","handleFilterByName","input","value","target","handleInputColumn","handleInputComparison","handleInputValue","filterPlanets","column","comparison","filter","planet","parseFloat","options","optionsFiltered","setOptionsColumn","filterDataButton","option","forEach","deleteFilter","event","removedFilter","context","filters","filterByName","name","filterByNumericValues"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport { getPlanets } from '../services/starwarsAPI';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setDataPlanets] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterColumn, setColumn] = useState('');\n  const [filterComparison, setComparison] = useState('');\n  const [filterValue, setValue] = useState('');\n  const [filteredData, setFilteredData] = useState(data);\n  const [filtersArray, setFiltersArray] = useState([]);\n\n  useEffect(() => {\n    async function fetchPlanets() {\n      const { results } = await getPlanets();\n      const dataPlanets = results;\n      setDataPlanets(dataPlanets);\n      setFilteredData(dataPlanets);\n    }\n    fetchPlanets();\n  }, []);\n\n  const handleFilterByName = (input) => {\n    const { value } = input.target;\n    setFilterName(value);\n  };\n\n  const handleInputColumn = (input) => {\n    const { value } = input.target;\n    setColumn(value);\n  };\n\n  const handleInputComparison = (input) => {\n    const { value } = input.target;\n    setComparison(value);\n  };\n\n  const handleInputValue = (input) => {\n    const { value } = input.target;\n    setValue(value);\n  };\n\n  const filterPlanets = (column, comparison, value) => {\n    switch (comparison) {\n    case 'greater than':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) > parseFloat(value))));\n      break;\n    case 'less than':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) < parseFloat(value))));\n      break;\n    case 'equal to':\n      setFilteredData(filteredData\n        .filter((planet) => (\n          parseFloat(planet[column]) === parseFloat(value))));\n      break;\n    default:\n      setFilteredData(filteredData);\n    }\n  };\n\n  const options = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const [optionsFiltered, setOptionsColumn] = useState(options);\n  const filterDataButton = () => {\n    if (filterColumn !== '' && filterComparison !== '' && filterValue !== '') {\n      setFiltersArray([...filtersArray, {\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue,\n      }]);\n      setOptionsColumn(optionsFiltered.filter((option) => option !== filterColumn));\n    } else setFilteredData(filteredData);\n  };\n\n  useEffect(() => {\n    filtersArray\n      .forEach((filter) => filterPlanets(filter.column, filter.comparison, filter.value));\n  }, [filtersArray]);\n\n  const deleteFilter = (event) => {\n    const { value } = event.target;\n    const removedFilter = filtersArray.filter((filter) => (filter.column !== value));\n    setFiltersArray(removedFilter);\n    setFilteredData(data);\n    setOptionsColumn([...optionsFiltered, value]);\n  };\n\n  const context = {\n    data,\n    filteredData,\n    filters: {\n      filterByName: {\n        name: filterName,\n      },\n      filterByNumericValues: filtersArray,\n    },\n    handleFilterByName,\n    handleInputColumn,\n    handleInputComparison,\n    handleInputValue,\n    setFilteredData,\n    filterDataButton,\n    deleteFilter,\n    optionsFiltered,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nexport default StarWarsProvider;\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}