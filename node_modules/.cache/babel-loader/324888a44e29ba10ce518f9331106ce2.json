{"ast":null,"code":"var _jsxFileName = \"/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/components/Context/Provider/index.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport getPlanets from '../../../service/contextAPI';\nimport StarWarsContext from '../StarWarsContext';\n\nfunction Provider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [planetList, setPlanetList] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: []\n  });\n  const [paramColumn, setParamColumn] = useState('');\n  const [paramComparison, setParamComparison] = useState('');\n  const [paramNumber, setParamNumber] = useState('');\n  const [filterData, setFilterData] = useState(data);\n  useEffect(() => {\n    const dataAPI = async () => {\n      const {\n        results\n      } = await getPlanets();\n      setData(results);\n    };\n\n    dataAPI();\n  }, []);\n  const planetListName = filterData ? planetList.filter(planet => planet.name.toLowerCase().includes(filters.filterByName.name.toLowerCase())) : filterData.filter(planet => planet.name.toLowerCase().includes(filters.filterByName.name.toLowerCase()));\n\n  const handleFilterPlanets = ({\n    target: {\n      value\n    }\n  }) => {\n    setFilters({ ...filters,\n      filterByName: {\n        name: value\n      }\n    });\n  };\n\n  const handleFiltersByColumn = ({\n    target: {\n      value\n    }\n  }) => {\n    setParamColumn(value);\n  };\n\n  const handleFiltersByComparison = ({\n    target: {\n      value\n    }\n  }) => {\n    setParamComparison(value);\n  };\n\n  const handleFiltersByNumber = ({\n    target: {\n      value\n    }\n  }) => {\n    setParamNumber(value);\n  };\n\n  const searchButton = () => {\n    if (paramComparison !== '' && paramColumn !== '' && paramNumber !== '') {\n      setFilters({ ...filters,\n        filterByNumericValues: [...filters.filterByNumericValues, {\n          column: paramColumn,\n          comparison: paramComparison,\n          value: paramNumber\n        }]\n      });\n\n      switch (paramComparison) {\n        case 'maior que':\n          setFilterData(planetListName.filter(planet => Number(planet[paramColumn]) > Number(paramNumber)));\n          break;\n\n        case 'menor que':\n          setFilterData(planetListName.filter(planet => Number(planet[paramColumn]) < Number(paramNumber)));\n          break;\n\n        case 'igual a':\n          setFilterData(planetListName.filter(planet => Number(planet[paramColumn]) === Number(paramNumber)));\n          break;\n\n        default:\n          setFilterData(planetListName);\n      }\n    } else setFilterData(planetListName);\n  };\n\n  const deleteParam = e => {\n    const {\n      value\n    } = e.target;\n    const filterUsed = filters.filterByNumericValues.filter(param => param.column !== value);\n    setFilters({ ...filters,\n      filterByNumericValues: filterUsed\n    });\n    setFilterData(data);\n  };\n\n  const context = {\n    data,\n    filters,\n    handleFilterPlanets,\n    paramNumber,\n    setParamNumber,\n    paramColumn,\n    setParamColumn,\n    paramComparison,\n    setParamComparison,\n    handleFiltersByColumn,\n    handleFiltersByComparison,\n    handleFiltersByNumber,\n    searchButton,\n    filterData,\n    planetList,\n    setPlanetList,\n    planetListName,\n    deleteParam\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default Provider;\nProvider.propTypes = {\n  children: PropTypes.element.isRequired\n};","map":{"version":3,"sources":["/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/components/Context/Provider/index.jsx"],"names":["React","useEffect","useState","PropTypes","getPlanets","StarWarsContext","Provider","children","data","setData","planetList","setPlanetList","filters","setFilters","filterByName","name","filterByNumericValues","paramColumn","setParamColumn","paramComparison","setParamComparison","paramNumber","setParamNumber","filterData","setFilterData","dataAPI","results","planetListName","filter","planet","toLowerCase","includes","handleFilterPlanets","target","value","handleFiltersByColumn","handleFiltersByComparison","handleFiltersByNumber","searchButton","column","comparison","Number","deleteParam","e","filterUsed","param","context","propTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport getPlanets from '../../../service/contextAPI';\nimport StarWarsContext from '../StarWarsContext';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [planetList, setPlanetList] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n  });\n  const [paramColumn, setParamColumn] = useState('');\n  const [paramComparison, setParamComparison] = useState('');\n  const [paramNumber, setParamNumber] = useState('');\n  const [filterData, setFilterData] = useState(data);\n\n  useEffect(() => {\n    const dataAPI = async () => {\n      const { results } = await getPlanets();\n      setData(results);\n    };\n    dataAPI();\n  }, []);\n\n  const planetListName = filterData ? planetList\n    .filter((planet) => planet.name.toLowerCase()\n      .includes(filters.filterByName.name.toLowerCase())) : filterData\n    .filter((planet) => planet.name.toLowerCase()\n      .includes(filters.filterByName.name.toLowerCase()));\n\n  const handleFilterPlanets = ({ target: { value } }) => {\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n  };\n\n  const handleFiltersByColumn = ({ target: { value } }) => {\n    setParamColumn(value);\n  };\n\n  const handleFiltersByComparison = ({ target: { value } }) => {\n    setParamComparison(value);\n  };\n\n  const handleFiltersByNumber = ({ target: { value } }) => {\n    setParamNumber(value);\n  };\n\n  const searchButton = () => {\n    if (paramComparison !== '' && paramColumn !== '' && paramNumber !== '') {\n      setFilters({\n        ...filters,\n        filterByNumericValues: [...filters.filterByNumericValues,\n          { column: paramColumn,\n            comparison: paramComparison,\n            value: paramNumber },\n        ],\n      });\n      switch (paramComparison) {\n      case 'maior que':\n        setFilterData(planetListName\n          .filter((planet) => Number(planet[paramColumn]) > Number(paramNumber)));\n        break;\n      case 'menor que':\n        setFilterData(planetListName\n          .filter((planet) => Number(planet[paramColumn]) < Number(paramNumber)));\n        break;\n      case 'igual a':\n        setFilterData(planetListName\n          .filter((planet) => Number(planet[paramColumn]) === Number(paramNumber)));\n        break;\n      default:\n        setFilterData(planetListName);\n      }\n    } else setFilterData(planetListName);\n  };\n\n  const deleteParam = (e) => {\n    const { value } = e.target;\n    const filterUsed = filters.filterByNumericValues\n      .filter((param) => (param.column) !== value);\n    setFilters({\n      ...filters,\n      filterByNumericValues: filterUsed,\n    });\n    setFilterData(data);\n  };\n\n  const context = {\n    data,\n    filters,\n    handleFilterPlanets,\n    paramNumber,\n    setParamNumber,\n    paramColumn,\n    setParamColumn,\n    paramComparison,\n    setParamComparison,\n    handleFiltersByColumn,\n    handleFiltersByComparison,\n    handleFiltersByNumber,\n    searchButton,\n    filterData,\n    planetList,\n    setPlanetList,\n    planetListName,\n    deleteParam,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}