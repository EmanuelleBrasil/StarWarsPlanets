{"ast":null,"code":"var _jsxFileName = \"/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/context/StarWarsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport { getPlanets } from '../services/starwarsAPI';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setDataPlanets] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterColumn, setColumn] = useState('');\n  const [filterComparison, setComparison] = useState('');\n  const [filterValue, setValue] = useState('');\n  const [filteredData, setFilteredData] = useState(data);\n  const [filterObject, setFilterObject] = useState({});\n  const [filtersArray, setFiltersArray] = useState([]);\n  useEffect(() => {\n    async function fetchPlanets() {\n      const {\n        results\n      } = await getPlanets();\n      const dataPlanets = results;\n      setDataPlanets(dataPlanets);\n      setFilteredData(dataPlanets);\n    }\n\n    fetchPlanets();\n  });\n\n  const handleFilterByName = input => {\n    const {\n      value\n    } = input.target;\n    setFilterName(value);\n  };\n\n  const handleInputColumn = input => {\n    const {\n      value\n    } = input.target;\n    setColumn(value);\n  };\n\n  const handleInputComparison = input => {\n    const {\n      value\n    } = input.target;\n    setComparison(value);\n  };\n\n  const handleInputValue = input => {\n    const {\n      value\n    } = input.target;\n    setValue(value);\n  };\n\n  const filterDataButton = () => {\n    if (filterColumn !== '' && filterComparison !== '' && filterValue !== '') {\n      // console.log(filterColumn);\n      setFilterObject({\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue\n      }); // console.log(filterObject);\n      // add o obj ao array de filtros\n\n      setFiltersArray([...filtersArray, {\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue\n      }]); // console.log(filtersArray);\n\n      switch (filterComparison) {\n        case 'maior que':\n          setFilteredData(data.filter(planet => parseFloat(planet[filterColumn]) > parseFloat(filterValue)));\n          break;\n\n        case 'menor que':\n          setFilteredData(data.filter(planet => parseFloat(planet[filterColumn]) < parseFloat(filterValue)));\n          break;\n\n        case 'igual a':\n          setFilteredData(data.filter(planet => parseFloat(planet[filterColumn]) === parseFloat(filterValue)));\n          break;\n\n        default:\n          setFilteredData(data);\n      }\n    } else setFilteredData(data);\n  };\n\n  const context = {\n    data,\n    filteredData,\n    filters: {\n      filterByName: {\n        name: filterName\n      },\n      // filterByNumericValues: [\n      //   {\n      //     column: filterColumn,\n      //     comparison: filterComparison,\n      //     value: filterValue,\n      //   },\n      // ],\n      filterByNumericValues: filtersArray\n    },\n    handleFilterByName,\n    handleInputColumn,\n    handleInputComparison,\n    handleInputValue,\n    setFilteredData,\n    filterDataButton\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default StarWarsProvider;\nStarWarsProvider.propTypes = {\n  children: PropTypes.element.isRequired\n};","map":{"version":3,"sources":["/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/context/StarWarsProvider.js"],"names":["React","useEffect","useState","PropTypes","StarWarsContext","getPlanets","StarWarsProvider","children","data","setDataPlanets","filterName","setFilterName","filterColumn","setColumn","filterComparison","setComparison","filterValue","setValue","filteredData","setFilteredData","filterObject","setFilterObject","filtersArray","setFiltersArray","fetchPlanets","results","dataPlanets","handleFilterByName","input","value","target","handleInputColumn","handleInputComparison","handleInputValue","filterDataButton","column","comparison","filter","planet","parseFloat","context","filters","filterByName","name","filterByNumericValues","propTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport { getPlanets } from '../services/starwarsAPI';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setDataPlanets] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterColumn, setColumn] = useState('');\n  const [filterComparison, setComparison] = useState('');\n  const [filterValue, setValue] = useState('');\n  const [filteredData, setFilteredData] = useState(data);\n  const [filterObject, setFilterObject] = useState({});\n  const [filtersArray, setFiltersArray] = useState([]);\n\n  useEffect(() => {\n    async function fetchPlanets() {\n      const { results } = await getPlanets();\n      const dataPlanets = results;\n      setDataPlanets(dataPlanets);\n      setFilteredData(dataPlanets);\n    }\n    fetchPlanets();\n  });\n\n  const handleFilterByName = (input) => {\n    const { value } = input.target;\n    setFilterName(value);\n  };\n\n  const handleInputColumn = (input) => {\n    const { value } = input.target;\n    setColumn(value);\n  };\n\n  const handleInputComparison = (input) => {\n    const { value } = input.target;\n    setComparison(value);\n  };\n\n  const handleInputValue = (input) => {\n    const { value } = input.target;\n    setValue(value);\n  };\n\n  const filterDataButton = () => {\n    if (filterColumn !== '' && filterComparison !== '' && filterValue !== '') {\n      // console.log(filterColumn);\n      setFilterObject({\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue,\n      });\n      // console.log(filterObject);\n      // add o obj ao array de filtros\n      setFiltersArray([...filtersArray, {\n        column: filterColumn,\n        comparison: filterComparison,\n        value: filterValue,\n      }]);\n      // console.log(filtersArray);\n      switch (filterComparison) {\n      case 'maior que':\n        setFilteredData(data\n          .filter((planet) => (\n            parseFloat(planet[filterColumn]) > parseFloat(filterValue))));\n        break;\n      case 'menor que':\n        setFilteredData(data\n          .filter((planet) => (\n            parseFloat(planet[filterColumn]) < parseFloat(filterValue))));\n        break;\n      case 'igual a':\n        setFilteredData(data\n          .filter((planet) => (\n            parseFloat(planet[filterColumn]) === parseFloat(filterValue))));\n        break;\n      default:\n        setFilteredData(data);\n      }\n    } else setFilteredData(data);\n  };\n\n  const context = {\n    data,\n    filteredData,\n    filters: {\n      filterByName: {\n        name: filterName,\n      },\n      // filterByNumericValues: [\n      //   {\n      //     column: filterColumn,\n      //     comparison: filterComparison,\n      //     value: filterValue,\n      //   },\n      // ],\n      filterByNumericValues: filtersArray,\n    },\n    handleFilterByName,\n    handleInputColumn,\n    handleInputComparison,\n    handleInputValue,\n    setFilteredData,\n    filterDataButton,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nexport default StarWarsProvider;\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}