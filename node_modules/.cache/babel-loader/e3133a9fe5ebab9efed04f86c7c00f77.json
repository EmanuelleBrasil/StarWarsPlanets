{"ast":null,"code":"var _jsxFileName = \"/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/components/PlanetsTable.js\";\nimport React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction PlanetsTable() {\n  const {\n    data,\n    filters: {\n      filterByName: {\n        name\n      },\n      filterByNumericValues: {\n        column,\n        comparison,\n        value\n      }\n    }\n  } = useContext(StarWarsContext);\n  const ZERO = 0;\n  const dataFiltered = data.filter(planet => planet.name.includes(name)); // const filterDataButton = () => {\n  //   if (column && comparison && value) {\n  //     const newData = data.filter((planet) => {\n  //       switch (comparison) {\n  //       case 'maior que':\n  //         planet[column] > value;\n  //       case 'menor que':\n  //         planet[column] < value;\n  //       case 'igual a':\n  //         planet[column] === value;\n  //       default:\n  //         planet;\n  //       }\n  //     });\n  //   }\n  // };\n\n  return data.length > ZERO ? /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Rotation Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"orbitalPeriod\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"diameter\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"climate\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"gravity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"terrain\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"surfaceWater\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"population\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"films\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Edited\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"url\")), dataFiltered.map(planet => /*#__PURE__*/React.createElement(\"tr\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, planet.films[0]), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, planet.url)))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }, \"Loading...\");\n}\n\nexport default PlanetsTable;","map":{"version":3,"sources":["/home/emanuelle/Trybe/frontend/sd-07-project-starwars-datatable-hooks/src/components/PlanetsTable.js"],"names":["React","useContext","StarWarsContext","PlanetsTable","data","filters","filterByName","name","filterByNumericValues","column","comparison","value","ZERO","dataFiltered","filter","planet","includes","length","map","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction PlanetsTable() {\n  const {\n    data,\n    filters: {\n      filterByName: { name },\n      filterByNumericValues: { column, comparison, value },\n    } } = useContext(StarWarsContext);\n\n  const ZERO = 0;\n\n  const dataFiltered = data.filter((planet) => planet.name.includes(name));\n  // const filterDataButton = () => {\n  //   if (column && comparison && value) {\n  //     const newData = data.filter((planet) => {\n  //       switch (comparison) {\n  //       case 'maior que':\n  //         planet[column] > value;\n  //       case 'menor que':\n  //         planet[column] < value;\n  //       case 'igual a':\n  //         planet[column] === value;\n  //       default:\n  //         planet;\n  //       }\n  //     });\n  //   }\n  // };\n\n  return data.length > ZERO ? (\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Rotation Period</th>\n        <th>orbitalPeriod</th>\n        <th>diameter</th>\n        <th>climate</th>\n        <th>gravity</th>\n        <th>terrain</th>\n        <th>surfaceWater</th>\n        <th>population</th>\n        <th>films</th>\n        <th>Created</th>\n        <th>Edited</th>\n        <th>url</th>\n      </tr>\n      {dataFiltered.map((planet) => (\n        <tr key={ planet.name }>\n          <td>{planet.name}</td>\n          <td>{planet.rotation_period}</td>\n          <td>{planet.orbital_period}</td>\n          <td>{planet.diameter}</td>\n          <td>{planet.climate}</td>\n          <td>{planet.gravity}</td>\n          <td>{planet.terrain}</td>\n          <td>{planet.surface_water}</td>\n          <td>{planet.population}</td>\n          <td>{planet.films[0]}</td>\n          <td>{planet.created}</td>\n          <td>{planet.edited}</td>\n          <td>{planet.url}</td>\n        </tr>\n      ))}\n    </table>\n  )\n    : (<div>Loading...</div>);\n}\n\nexport default PlanetsTable;\n"]},"metadata":{},"sourceType":"module"}